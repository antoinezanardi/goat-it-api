import Vitest from "@vitest/eslint-plugin";
import type { Linter } from "eslint";

const ESLINT_UNIT_TESTS_FLAT_CONFIG = {
  name: "tests",
  files: ["src/**/*.spec.ts"],
  plugins: { vitest: Vitest },
  rules: {
    "max-lines-per-function": "off",
    "no-magic-numbers": "off",
    "@typescript-eslint/no-unsafe-type-assertion": "off",
    "@typescript-eslint/unbound-method": "off",
    "import/no-namespace": "off",
    "import/no-internal-modules": "off",
    "import/max-dependencies": [
      "error", {
        max: 40,
        ignoreTypeImports: true,
      },
    ],
    "@typescript-eslint/init-declarations": "off",
    "@typescript-eslint/no-magic-numbers": "off",
    "@typescript-eslint/prefer-destructuring": "off",
    "vitest/consistent-test-filename": ["error", { pattern: "^(.+\\.spec)\\.ts$" }],
    "vitest/consistent-test-it": ["error", { fn: "it" }],
    "vitest/consistent-vitest-vi": "error",
    "vitest/expect-expect": "error",
    "vitest/hoisted-apis-on-top": "error",
    "vitest/max-expects": ["error", { max: 10 }],
    "vitest/max-nested-describe": "error",
    "vitest/no-alias-methods": "error",
    "vitest/no-commented-out-tests": "error",
    "vitest/no-conditional-expect": "error",
    "vitest/no-conditional-in-test": "error",
    "vitest/no-conditional-tests": "error",
    "vitest/no-disabled-tests": "error",
    "vitest/no-duplicate-hooks": "error",
    "vitest/no-focused-tests": "error",
    "vitest/no-hooks": "off",
    "vitest/no-identical-title": "error",
    "vitest/no-import-node-test": "error",
    "vitest/no-importing-vitest-globals": "error",
    "vitest/no-interpolation-in-snapshots": "error",
    "vitest/no-large-snapshots": "error",
    "vitest/no-mocks-import": "error",
    "vitest/no-restricted-matchers": "off",
    "vitest/no-restricted-vi-methods": "off",
    "vitest/no-standalone-expect": "error",
    "vitest/no-test-prefixes": "error",
    "vitest/no-test-return-statement": "error",
    "vitest/padding-around-after-all-blocks": "error",
    "vitest/padding-around-after-each-blocks": "error",
    "vitest/padding-around-all": "error",
    "vitest/padding-around-before-all-blocks": "error",
    "vitest/padding-around-before-each-blocks": "error",
    "vitest/padding-around-describe-blocks": "error",
    "vitest/padding-around-expect-groups": "error",
    "vitest/padding-around-test-blocks": "error",
    "vitest/prefer-called-once": "error",
    "vitest/prefer-called-times": "off",
    "vitest/prefer-called-with": "error",
    "vitest/prefer-comparison-matcher": "error",
    "vitest/prefer-describe-function-title": "error",
    "vitest/prefer-each": "error",
    "vitest/prefer-equality-matcher": "error",
    "vitest/prefer-expect-assertions": "off",
    "vitest/prefer-expect-type-of": "error",
    "vitest/prefer-expect-resolves": "error",
    "vitest/prefer-hooks-in-order": "error",
    "vitest/prefer-hooks-on-top": "error",
    "vitest/prefer-importing-vitest-globals": "off",
    "vitest/prefer-lowercase-title": "off",
    "vitest/prefer-mock-promise-shorthand": "error",
    "vitest/prefer-snapshot-hint": "error",
    "vitest/prefer-spy-on": "error",
    "vitest/prefer-strict-boolean-matchers": "off",
    "vitest/prefer-strict-equal": "error",
    "vitest/prefer-to-be": "error",
    "vitest/prefer-to-be-falsy": "error",
    "vitest/prefer-to-be-object": "error",
    "vitest/prefer-to-be-truthy": "error",
    "vitest/prefer-to-contain": "error",
    "vitest/prefer-to-have-length": "error",
    "vitest/prefer-todo": "error",
    "vitest/prefer-vi-mocked": "error",
    "vitest/require-hook": [
      "error", {
        allowedFunctionCalls: ["mockNuxtImport"],
      },
    ],
    "vitest/require-local-test-context-for-concurrent-snapshots": "error",
    "vitest/require-mock-type-parameters": "error",
    "vitest/require-to-throw-message": "error",
    "vitest/require-top-level-describe": "error",
    "vitest/valid-describe-callback": "error",
    "vitest/valid-expect-in-promise": "error",
    "vitest/valid-expect": "error",
    "vitest/valid-title": [
      "error", {
        ignoreTypeOfDescribeName: true,
        mustMatch: { it: new RegExp(/^should .+ when .+\S\.$|^\$test$/u, "u").source },
      },
    ],
    "vitest/warn-todo": "error",
  },
} satisfies Linter.Config;

export { ESLINT_UNIT_TESTS_FLAT_CONFIG };