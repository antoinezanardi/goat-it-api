{
  "files": {
    "src/app/app.controller.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "0",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/app/app.controller.ts(6,22): error TS2355: A function whose declared type is neither 'undefined', 'void', nor 'any' must return a value.\nsrc/app/app.controller.ts(6,22): error TS2355: A function whose declared type is neither 'undefined', 'void', nor 'any' must return a value.\n",
          "status": "CompileError",
          "static": false,
          "coveredBy": [
            "8"
          ],
          "location": {
            "end": {
              "column": 4,
              "line": 8
            },
            "start": {
              "column": 29,
              "line": 6
            }
          }
        },
        {
          "id": "1",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected '' to be 'Hello World!' // Object.is equality",
          "status": "Killed",
          "static": false,
          "testsCompleted": 1,
          "killedBy": [
            "8"
          ],
          "coveredBy": [
            "8"
          ],
          "location": {
            "end": {
              "column": 26,
              "line": 7
            },
            "start": {
              "column": 12,
              "line": 7
            }
          }
        }
      ],
      "source": "import { Controller, Get } from '@nestjs/common';\n\n@Controller()\nexport class AppController {\n  @Get()\n  public getHello(): string {\n    return \"Hello World!\";\n  }\n}"
    },
    "src/server/server.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "2",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/server/server.ts(5,29): error TS2355: A function whose declared type is neither 'undefined', 'void', nor 'any' must return a value.\nsrc/server/server.ts(5,29): error TS2355: A function whose declared type is neither 'undefined', 'void', nor 'any' must return a value.\n",
          "status": "CompileError",
          "static": false,
          "coveredBy": [
            "0",
            "1",
            "2",
            "3",
            "4",
            "5",
            "6"
          ],
          "location": {
            "end": {
              "column": 2,
              "line": 21
            },
            "start": {
              "column": 61,
              "line": 5
            }
          }
        },
        {
          "id": "3",
          "mutatorName": "LogicalOperator",
          "replacement": "process.env.HOST && '0.0.0.0'",
          "statusReason": "expected \"spy\" to be called once with arguments: [ { host: '0.0.0.0', port: 3000 } ]\u001b[90m\n\nReceived: \n\n\u001b[1m  1st spy call:\n\n\u001b[22m\u001b[2m  [\u001b[22m\n\u001b[2m    {\u001b[22m\n\u001b[32m-     \"host\": \"0.0.0.0\",\u001b[90m\n\u001b[31m+     \"host\": undefined,\u001b[90m\n\u001b[2m      \"port\": 3000,\u001b[22m\n\u001b[2m    },\u001b[22m\n\u001b[2m  ]\u001b[22m\n\u001b[39m\u001b[90m\n\nNumber of calls: \u001b[1m1\u001b[22m\n\u001b[39m",
          "status": "Killed",
          "static": false,
          "testsCompleted": 3,
          "killedBy": [
            "2"
          ],
          "coveredBy": [
            "0",
            "1",
            "2",
            "3",
            "4",
            "5",
            "6"
          ],
          "location": {
            "end": {
              "column": 45,
              "line": 13
            },
            "start": {
              "column": 16,
              "line": 13
            }
          }
        },
        {
          "id": "5",
          "mutatorName": "LogicalOperator",
          "replacement": "process.env.PORT && '3000'",
          "statusReason": "src/server/server.ts(14,25): error TS2345: Argument of type 'string | undefined' is not assignable to parameter of type 'string'.\n  Type 'undefined' is not assignable to type 'string'.\nsrc/server/server.ts(14,25): error TS2345: Argument of type 'string | undefined' is not assignable to parameter of type 'string'.\n  Type 'undefined' is not assignable to type 'string'.\n",
          "status": "CompileError",
          "static": false,
          "coveredBy": [
            "0",
            "1",
            "2",
            "3",
            "4",
            "5",
            "6"
          ],
          "location": {
            "end": {
              "column": 51,
              "line": 14
            },
            "start": {
              "column": 25,
              "line": 14
            }
          }
        },
        {
          "id": "4",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected \"spy\" to be called once with arguments: [ { host: '0.0.0.0', port: 3000 } ]\u001b[90m\n\nReceived: \n\n\u001b[1m  1st spy call:\n\n\u001b[22m\u001b[2m  [\u001b[22m\n\u001b[2m    {\u001b[22m\n\u001b[32m-     \"host\": \"0.0.0.0\",\u001b[90m\n\u001b[31m+     \"host\": \"\",\u001b[90m\n\u001b[2m      \"port\": 3000,\u001b[22m\n\u001b[2m    },\u001b[22m\n\u001b[2m  ]\u001b[22m\n\u001b[39m\u001b[90m\n\nNumber of calls: \u001b[1m1\u001b[22m\n\u001b[39m",
          "status": "Killed",
          "static": false,
          "testsCompleted": 3,
          "killedBy": [
            "2"
          ],
          "coveredBy": [
            "0",
            "1",
            "2"
          ],
          "location": {
            "end": {
              "column": 45,
              "line": 13
            },
            "start": {
              "column": 36,
              "line": 13
            }
          }
        },
        {
          "id": "6",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected \"spy\" to be called once with arguments: [ { host: '0.0.0.0', port: 3000 } ]\u001b[90m\n\nReceived: \n\n\u001b[1m  1st spy call:\n\n\u001b[22m\u001b[2m  [\u001b[22m\n\u001b[2m    {\u001b[22m\n\u001b[2m      \"host\": \"0.0.0.0\",\u001b[22m\n\u001b[32m-     \"port\": 3000,\u001b[90m\n\u001b[31m+     \"port\": NaN,\u001b[90m\n\u001b[2m    },\u001b[22m\n\u001b[2m  ]\u001b[22m\n\u001b[39m\u001b[90m\n\nNumber of calls: \u001b[1m1\u001b[22m\n\u001b[39m",
          "status": "Killed",
          "static": false,
          "testsCompleted": 3,
          "killedBy": [
            "2"
          ],
          "coveredBy": [
            "0",
            "1",
            "2"
          ],
          "location": {
            "end": {
              "column": 51,
              "line": 14
            },
            "start": {
              "column": 45,
              "line": 14
            }
          }
        },
        {
          "id": "7",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "expected \"spy\" to be called once with arguments: [ { host: '0.0.0.0', port: 3000 } ]\u001b[90m\n\nReceived: \n\n\u001b[1m  1st spy call:\n\n\u001b[22m\u001b[2m  [\u001b[22m\n\u001b[32m-   {\u001b[90m\n\u001b[32m-     \"host\": \"0.0.0.0\",\u001b[90m\n\u001b[32m-     \"port\": 3000,\u001b[90m\n\u001b[32m-   },\u001b[90m\n\u001b[31m+   {},\u001b[90m\n\u001b[2m  ]\u001b[22m\n\u001b[39m\u001b[90m\n\nNumber of calls: \u001b[1m1\u001b[22m\n\u001b[39m",
          "status": "Killed",
          "static": false,
          "testsCompleted": 3,
          "killedBy": [
            "2"
          ],
          "coveredBy": [
            "0",
            "1",
            "2",
            "3",
            "4",
            "5",
            "6"
          ],
          "location": {
            "end": {
              "column": 34,
              "line": 15
            },
            "start": {
              "column": 20,
              "line": 15
            }
          }
        },
        {
          "id": "8",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "expected \"log\" to be called once with arguments: [ Array(1) ]\u001b[90m\n\nReceived: \n\n\u001b[1m  1st log call:\n\n\u001b[22m\u001b[2m  [\u001b[22m\n\u001b[32m-   \"üêê Goat It API is running on: http://mocked-host:9090\",\u001b[90m\n\u001b[31m+   \"\",\u001b[90m\n\u001b[2m  ]\u001b[22m\n\u001b[39m\u001b[90m\n\nNumber of calls: \u001b[1m1\u001b[22m\n\u001b[39m",
          "status": "Killed",
          "static": false,
          "testsCompleted": 6,
          "killedBy": [
            "5"
          ],
          "coveredBy": [
            "0",
            "1",
            "2",
            "3",
            "4",
            "5",
            "6"
          ],
          "location": {
            "end": {
              "column": 56,
              "line": 18
            },
            "start": {
              "column": 15,
              "line": 18
            }
          }
        }
      ],
      "source": "import { NestFactory } from \"@nestjs/core\";\nimport { FastifyAdapter, NestFastifyApplication } from \"@nestjs/platform-fastify\";\nimport { AppModule } from \"@app/app.module\";\n\nasync function bootstrap(): Promise<NestFastifyApplication> {\n  const app = await NestFactory.create<NestFastifyApplication>(\n    AppModule,\n    new FastifyAdapter(),\n  );\n\n  app.enableShutdownHooks();\n\n  const host = process.env.HOST ?? '0.0.0.0';\n  const port = parseInt(process.env.PORT ?? '3000', 10);\n  await app.listen({ host, port });\n\n  const appUrl = await app.getUrl();\n  console.log(`üêê Goat It API is running on: ${appUrl}`);\n\n  return app;\n}\n\nexport { bootstrap };"
    }
  },
  "schemaVersion": "1.0",
  "thresholds": {
    "high": 100,
    "low": 100,
    "break": 100
  },
  "testFiles": {
    "src/server/server.spec.ts": {
      "tests": [
        {
          "id": "0",
          "name": "Server bootstrap should create from NestFactory when called."
        },
        {
          "id": "1",
          "name": "Server bootstrap should enable shutdown hooks when called."
        },
        {
          "id": "2",
          "name": "Server bootstrap should listen on the default host and port when none are provided."
        },
        {
          "id": "3",
          "name": "Server bootstrap should listen on the provided host and port when they are provided."
        },
        {
          "id": "4",
          "name": "Server bootstrap should get app url when called."
        },
        {
          "id": "5",
          "name": "Server bootstrap should log the app url when called."
        },
        {
          "id": "6",
          "name": "Server bootstrap should return the app when called."
        }
      ],
      "source": "import { bootstrap } from \"@server/server\";\nimport * as NestCore from \"@nestjs/core\";\nimport * as Fastify from \"@nestjs/platform-fastify\";\nimport type { Mock } from \"vitest\";\n\nvi.mock(\"@nestjs/core\");\nvi.mock(\"@app/app.module\", () => ({\n  AppModule: { name: \"MockedModule\" },\n}));\n\ndescribe(\"Server\", () => {\n  beforeEach(() => {\n    (NestCore.NestFactory.create as Mock).mockResolvedValue({\n      enableShutdownHooks: vi.fn(),\n      listen: vi.fn().mockResolvedValue(undefined),\n      getUrl: vi.fn().mockResolvedValue(\"http://mocked-host:9090\"),\n    });\n  });\n\n  describe(\"bootstrap\", () => {\n    it(\"should create from NestFactory when called.\", async () => {\n      await bootstrap();\n\n      expect(NestCore.NestFactory.create).toHaveBeenCalledExactlyOnceWith({ name: \"MockedModule\" }, expect.any(Fastify.FastifyAdapter));\n    });\n\n    it(\"should enable shutdown hooks when called.\", async () => {\n      const app = await bootstrap();\n\n      expect(app.enableShutdownHooks).toHaveBeenCalledExactlyOnceWith();\n    });\n\n    it(\"should listen on the default host and port when none are provided.\", async () => {\n      const app = await bootstrap();\n\n      expect(app.listen).toHaveBeenCalledExactlyOnceWith({ host: \"0.0.0.0\", port: 3000 });\n    });\n\n    it(\"should listen on the provided host and port when they are provided.\", async () => {\n      process.env.HOST = \"127.0.0.1\";\n      process.env.PORT = \"8080\";\n\n      const app = await bootstrap();\n\n      expect(app.listen).toHaveBeenCalledExactlyOnceWith({ host: \"127.0.0.1\", port: 8080 });\n    });\n\n    it(\"should get app url when called.\", async () => {\n      const app = await bootstrap();\n\n      expect(app.getUrl).toHaveBeenCalledExactlyOnceWith();\n    });\n\n    it(\"should log the app url when called.\", async () => {\n      const consoleLogSpy = vi.spyOn(console, \"log\").mockImplementation(() => {});\n      await bootstrap();\n\n      expect(consoleLogSpy).toHaveBeenCalledExactlyOnceWith(\"üêê Goat It API is running on: http://mocked-host:9090\");\n    });\n\n    it(\"should return the app when called.\", async () => {\n      const app = await bootstrap();\n\n      expect(app).toStrictEqual({\n        enableShutdownHooks: expect.any(Function),\n        listen: expect.any(Function),\n        getUrl: expect.any(Function),\n      });\n    });\n  });\n});"
    },
    "src/main.spec.ts": {
      "tests": [
        {
          "id": "7",
          "name": "Main Root should call bootstrap when file is imported."
        }
      ],
      "source": "import * as Server from \"@server/server\";\n\nvi.mock(\"@server/server\", () => ({\n  bootstrap: vi.fn(),\n}));\n\ndescribe(\"Main\", () => {\n  describe(\"Root\", () => {\n    it(\"should call bootstrap when file is imported.\", async() => {\n      await import(\"./main\");\n\n      expect(Server.bootstrap).toHaveBeenCalledExactlyOnceWith();\n    });\n  });\n});"
    },
    "src/app/app.controller.spec.ts": {
      "tests": [
        {
          "id": "8",
          "name": "App Controller getHello should return 'Hello World!' when called."
        }
      ],
      "source": "import { AppController } from \"@app/app.controller\";\n\ndescribe(\"App Controller\", () => {\n  describe(\"getHello\", () => {\n    const appController = new AppController();\n\n    it(\"should return 'Hello World!' when called.\", () => {\n      expect(appController.getHello()).toBe(\"Hello World!\");\n    });\n  });\n});"
    }
  },
  "projectRoot": "/Users/mac-Z14AZANA/WebstormProjects/goat-it-api",
  "config": {
    "cleanTempDir": "always",
    "incremental": true,
    "incrementalFile": "tests/mutation/incremental/incremental.json",
    "checkers": [
      "typescript"
    ],
    "tsconfigFile": "tsconfig.json",
    "testRunner": "vitest",
    "ignoreStatic": true,
    "mutate": [
      "src/**/*.ts",
      "!**/*.spec.ts",
      "!**/*.dto.ts",
      "!**/*.schema.ts",
      "!**/*.constants.ts"
    ],
    "plugins": [
      "@stryker-mutator/vitest-runner",
      "@stryker-mutator/typescript-checker"
    ],
    "ignorePatterns": [
      ".github/",
      ".husky/",
      ".output/",
      ".run/",
      ".idea/",
      "dist",
      "configs/",
      "!configs/vitest/vitest.config.ts",
      "tests/stryker",
      "tests/unit/coverage",
      "scripts/",
      ".editorconfig",
      ".npmrc",
      ".DS_Store",
      "CHANGELOG.md",
      "LICENSE",
      "pnpm-lock.yaml",
      "sonar-project.properties",
      "README.md"
    ],
    "vitest": {
      "configFile": "configs/vitest/vitest.config.ts",
      "related": true
    },
    "reporters": [
      "clear-text",
      "progress",
      "html",
      "json"
    ],
    "htmlReporter": {
      "fileName": "tests/mutation/coverage/index.html"
    },
    "jsonReporter": {
      "fileName": "tests/mutation/coverage/mutation.json"
    },
    "thresholds": {
      "high": 100,
      "low": 100,
      "break": 100
    },
    "dryRunTimeoutMinutes": 10,
    "disableTypeChecks": "src/**/*.{js,ts,jsx,tsx,html,vue}",
    "force": true,
    "configFile": "configs/stryker/stryker.config.mjs",
    "allowConsoleColors": true,
    "checkerNodeArgs": [],
    "commandRunner": {
      "command": "npm test"
    },
    "coverageAnalysis": "perTest",
    "clearTextReporter": {
      "allowColor": true,
      "allowEmojis": false,
      "logTests": true,
      "maxTestsToLog": 3,
      "reportTests": true,
      "reportMutants": true,
      "reportScoreTable": true,
      "skipFull": false
    },
    "dashboard": {
      "baseUrl": "https://dashboard.stryker-mutator.io/api/reports",
      "reportType": "full"
    },
    "dryRunOnly": false,
    "eventReporter": {
      "baseDir": "reports/mutation/events"
    },
    "fileLogLevel": "off",
    "inPlace": false,
    "logLevel": "info",
    "maxConcurrentTestRunners": 9007199254740991,
    "maxTestRunnerReuse": 0,
    "mutator": {
      "plugins": null,
      "excludedMutations": []
    },
    "appendPlugins": [],
    "symlinkNodeModules": true,
    "tempDirName": ".stryker-tmp",
    "testRunnerNodeArgs": [],
    "timeoutFactor": 1.5,
    "timeoutMS": 5000,
    "warnings": true,
    "disableBail": false,
    "allowEmpty": false,
    "ignorers": [],
    "typescriptChecker": {
      "prioritizePerformanceOverAccuracy": true
    }
  },
  "framework": {
    "name": "StrykerJS",
    "version": "9.2.0",
    "branding": {
      "homepageUrl": "https://stryker-mutator.io",
      "imageUrl": "data:image/svg+xml;utf8,%3Csvg viewBox='0 0 1458 1458' xmlns='http://www.w3.org/2000/svg' fill-rule='evenodd' clip-rule='evenodd' stroke-linejoin='round' stroke-miterlimit='2'%3E%3Cpath fill='none' d='M0 0h1458v1458H0z'/%3E%3CclipPath id='a'%3E%3Cpath d='M0 0h1458v1458H0z'/%3E%3C/clipPath%3E%3Cg clip-path='url(%23a)'%3E%3Cpath d='M1458 729c0 402.655-326.345 729-729 729S0 1131.655 0 729C0 326.445 326.345 0 729 0s729 326.345 729 729' fill='%23e74c3c' fill-rule='nonzero'/%3E%3Cpath d='M778.349 1456.15L576.6 1254.401l233-105 85-78.668v-64.332l-257-257-44-187-50-208 251.806-82.793L1076.6 389.401l380.14 379.15c-19.681 367.728-311.914 663.049-678.391 687.599z' fill-opacity='.3'/%3E%3Cpath d='M753.4 329.503c41.79 0 74.579 7.83 97.925 25.444 23.571 18.015 41.69 43.956 55.167 77.097l11.662 28.679 165.733-58.183-14.137-32.13c-26.688-60.655-64.896-108.61-114.191-144.011-49.329-35.423-117.458-54.302-204.859-54.302-50.78 0-95.646 7.376-134.767 21.542-40.093 14.671-74.09 34.79-102.239 60.259-28.84 26.207-50.646 57.06-65.496 92.701-14.718 35.052-22.101 72.538-22.101 112.401 0 72.536 20.667 133.294 61.165 182.704 38.624 47.255 98.346 88.037 179.861 121.291 42.257 17.475 78.715 33.125 109.227 46.994 27.193 12.361 49.294 26.124 66.157 41.751 15.309 14.186 26.497 30.584 33.63 49.258 7.721 20.214 11.16 45.69 11.16 76.402 0 28.021-4.251 51.787-13.591 71.219-8.832 18.374-20.171 33.178-34.523 44.219-14.787 11.374-31.193 19.591-49.393 24.466-19.68 5.359-39.14 7.993-58.69 7.993-29.359 0-54.387-3.407-75.182-10.747-20.112-7.013-37.144-16.144-51.259-27.486-13.618-11.009-24.971-23.766-33.744-38.279-9.64-15.8-17.272-31.924-23.032-48.408l-10.965-31.376-161.669 60.585 10.734 30.124c10.191 28.601 24.197 56.228 42.059 82.748 18.208 27.144 41.322 51.369 69.525 72.745 27.695 21.075 60.904 38.218 99.481 51.041 37.777 12.664 82.004 19.159 132.552 19.159 49.998 0 95.818-8.321 137.611-24.622 42.228-16.471 78.436-38.992 108.835-67.291 30.719-28.597 54.631-62.103 71.834-100.642 17.263-38.56 25.923-79.392 25.923-122.248 0-54.339-8.368-100.37-24.208-138.32-16.29-38.759-38.252-71.661-65.948-98.797-26.965-26.418-58.269-48.835-93.858-67.175-33.655-17.241-69.196-33.11-106.593-47.533-35.934-13.429-65.822-26.601-89.948-39.525-22.153-11.868-40.009-24.21-53.547-37.309-11.429-11.13-19.83-23.678-24.718-37.664-5.413-15.49-7.98-33.423-7.98-53.577 0-40.883 11.293-71.522 37.086-90.539 28.443-20.825 64.985-30.658 109.311-30.658z' fill='%23f1c40f' fill-rule='nonzero'/%3E%3Cpath d='M720 0h18v113h-18zM1458 738v-18h-113v18h113zM720 1345h18v113h-18zM113 738v-18H0v18h113z'/%3E%3C/g%3E%3C/svg%3E"
    },
    "dependencies": {
      "@stryker-mutator/typescript-checker": "9.2.0",
      "typescript": "5.9.3",
      "webpack": "5.100.2"
    }
  }
}